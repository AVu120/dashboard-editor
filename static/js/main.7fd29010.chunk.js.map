{"version":3,"sources":["components/common/appHeader/AppHeader.module.scss","pages/editor/Editor.module.scss","App.module.scss","components/common/widgets/SimpleLineChart.tsx","components/common/widgets/StackedAreaChart.tsx","components/common/widgets/MixedBarChart.tsx","components/common/widgets/StackedBarChart.tsx","components/common/widgets/SimpleScatterChart.tsx","components/common/widgetCard/WidgetCard.tsx","components/common/widgetGrid/WidgetGrid.tsx","pages/editor/Editor.tsx","pages/dashboard/Dashboard.tsx","components/common/appHeader/AppHeader.tsx","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx","components/common/widgetCard/WidgetCard.module.scss"],"names":["module","exports","data","name","uv","pv","amt","Example","ResponsiveContainer","width","height","LineChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Line","type","stroke","activeDot","r","PureComponent","demoUrl","AreaChart","Area","stackId","fill","BarChart","Bar","x","y","z","ScatterChart","unit","cursor","Scatter","WidgetCard","deleteWidget","i","isEditorModeOn","displayedWidget","className","styles","WidgetCardInEditMode","header","headerInReadOnlyMode","title","onClick","size","body","ReactGridLayout","WidthProvider","RGL","WidgetGrid","layout","setLayout","cols","isDraggable","isResizable","onLayoutChange","map","item","Editor","numberOfEmptyPanelsInGrid","length","maxWidgetYPosition","Math","max","widgdet","maxHeightofHighestWidget","filter","widget","h","style","position","emptyPanelsgrid","Array","from","_","emptyPanel","widgetLayout","Dashboard","AppHeader","setIsEditorModeOn","addWidget","availableWidgetOptions","option","some","nav","display","alignItems","htmlFor","mb","id","isChecked","onChange","e","target","checked","editorModeSwitch","as","IconButton","icon","Add","variant","noMoreOptions","App","useState","currentLayout","theme","lastWidgetPosition","NUMBER_OF_COLUMNS","w","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7fd29010.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"AppHeader_header__PyXLP\",\"nav\":\"AppHeader_nav__1Q2h2\",\"noMoreOptions\":\"AppHeader_noMoreOptions__dN7Nh\",\"editorModeSwitch\":\"AppHeader_editorModeSwitch__YCz1u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"emptyPanelsgrid\":\"Editor_emptyPanelsgrid__1g7tS\",\"emptyPanel\":\"Editor_emptyPanel__33Bsh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3Wd0w\",\"body\":\"App_body__k0L6c\"};","import React, { PureComponent } from \"react\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\n\r\nconst data = [\r\n  {\r\n    name: \"Page A\",\r\n    uv: 4000,\r\n    pv: 2400,\r\n    amt: 2400,\r\n  },\r\n  {\r\n    name: \"Page B\",\r\n    uv: 3000,\r\n    pv: 1398,\r\n    amt: 2210,\r\n  },\r\n  {\r\n    name: \"Page C\",\r\n    uv: 2000,\r\n    pv: 9800,\r\n    amt: 2290,\r\n  },\r\n  {\r\n    name: \"Page D\",\r\n    uv: 2780,\r\n    pv: 3908,\r\n    amt: 2000,\r\n  },\r\n  {\r\n    name: \"Page E\",\r\n    uv: 1890,\r\n    pv: 4800,\r\n    amt: 2181,\r\n  },\r\n  {\r\n    name: \"Page F\",\r\n    uv: 2390,\r\n    pv: 3800,\r\n    amt: 2500,\r\n  },\r\n  {\r\n    name: \"Page G\",\r\n    uv: 3490,\r\n    pv: 4300,\r\n    amt: 2100,\r\n  },\r\n];\r\n\r\nexport default class Example extends PureComponent {\r\n  static demoUrl = \"https://codesandbox.io/s/simple-line-chart-kec3v\";\r\n\r\n  render() {\r\n    return (\r\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n        <LineChart\r\n          width={500}\r\n          height={300}\r\n          data={data}\r\n          margin={{\r\n            top: 5,\r\n            right: 30,\r\n            left: 20,\r\n            bottom: 5,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"name\" />\r\n          <YAxis />\r\n          <Tooltip />\r\n          <Legend />\r\n          <Line\r\n            type=\"monotone\"\r\n            dataKey=\"pv\"\r\n            stroke=\"#8884d8\"\r\n            activeDot={{ r: 8 }}\r\n          />\r\n          <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#82ca9d\" />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent } from \"react\";\r\nimport {\r\n  AreaChart,\r\n  Area,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\n\r\nconst data = [\r\n  {\r\n    name: \"Page A\",\r\n    uv: 4000,\r\n    pv: 2400,\r\n    amt: 2400,\r\n  },\r\n  {\r\n    name: \"Page B\",\r\n    uv: 3000,\r\n    pv: 1398,\r\n    amt: 2210,\r\n  },\r\n  {\r\n    name: \"Page C\",\r\n    uv: 2000,\r\n    pv: 9800,\r\n    amt: 2290,\r\n  },\r\n  {\r\n    name: \"Page D\",\r\n    uv: 2780,\r\n    pv: 3908,\r\n    amt: 2000,\r\n  },\r\n  {\r\n    name: \"Page E\",\r\n    uv: 1890,\r\n    pv: 4800,\r\n    amt: 2181,\r\n  },\r\n  {\r\n    name: \"Page F\",\r\n    uv: 2390,\r\n    pv: 3800,\r\n    amt: 2500,\r\n  },\r\n  {\r\n    name: \"Page G\",\r\n    uv: 3490,\r\n    pv: 4300,\r\n    amt: 2100,\r\n  },\r\n];\r\n\r\nexport default class Example extends PureComponent {\r\n  static demoUrl = \"https://codesandbox.io/s/stacked-area-chart-ix341\";\r\n\r\n  render() {\r\n    return (\r\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n        <AreaChart\r\n          width={500}\r\n          height={400}\r\n          data={data}\r\n          margin={{\r\n            top: 10,\r\n            right: 30,\r\n            left: 0,\r\n            bottom: 0,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"name\" />\r\n          <YAxis />\r\n          <Tooltip />\r\n          <Area\r\n            type=\"monotone\"\r\n            dataKey=\"uv\"\r\n            stackId=\"1\"\r\n            stroke=\"#8884d8\"\r\n            fill=\"#8884d8\"\r\n          />\r\n          <Area\r\n            type=\"monotone\"\r\n            dataKey=\"pv\"\r\n            stackId=\"1\"\r\n            stroke=\"#82ca9d\"\r\n            fill=\"#82ca9d\"\r\n          />\r\n          <Area\r\n            type=\"monotone\"\r\n            dataKey=\"amt\"\r\n            stackId=\"1\"\r\n            stroke=\"#ffc658\"\r\n            fill=\"#ffc658\"\r\n          />\r\n        </AreaChart>\r\n      </ResponsiveContainer>\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent } from \"react\";\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\n\r\nconst data = [\r\n  {\r\n    name: \"Page A\",\r\n    uv: 4000,\r\n    pv: 2400,\r\n    amt: 2400,\r\n  },\r\n  {\r\n    name: \"Page B\",\r\n    uv: 3000,\r\n    pv: 1398,\r\n    amt: 2210,\r\n  },\r\n  {\r\n    name: \"Page C\",\r\n    uv: 2000,\r\n    pv: 9800,\r\n    amt: 2290,\r\n  },\r\n  {\r\n    name: \"Page D\",\r\n    uv: 2780,\r\n    pv: 3908,\r\n    amt: 2000,\r\n  },\r\n  {\r\n    name: \"Page E\",\r\n    uv: 1890,\r\n    pv: 4800,\r\n    amt: 2181,\r\n  },\r\n  {\r\n    name: \"Page F\",\r\n    uv: 2390,\r\n    pv: 3800,\r\n    amt: 2500,\r\n  },\r\n  {\r\n    name: \"Page G\",\r\n    uv: 3490,\r\n    pv: 4300,\r\n    amt: 2100,\r\n  },\r\n];\r\n\r\nexport default class Example extends PureComponent {\r\n  static demoUrl = \"https://codesandbox.io/s/mixed-bar-chart-q4hgc\";\r\n\r\n  render() {\r\n    return (\r\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n        <BarChart\r\n          width={500}\r\n          height={300}\r\n          data={data}\r\n          margin={{\r\n            top: 20,\r\n            right: 30,\r\n            left: 20,\r\n            bottom: 5,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"name\" />\r\n          <YAxis />\r\n          <Tooltip />\r\n          <Legend />\r\n          <Bar dataKey=\"pv\" stackId=\"a\" fill=\"#8884d8\" />\r\n          <Bar dataKey=\"amt\" stackId=\"a\" fill=\"#82ca9d\" />\r\n          <Bar dataKey=\"uv\" fill=\"#ffc658\" />\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent } from \"react\";\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\n\r\nconst data = [\r\n  {\r\n    name: \"Page A\",\r\n    uv: 4000,\r\n    pv: 2400,\r\n    amt: 2400,\r\n  },\r\n  {\r\n    name: \"Page B\",\r\n    uv: 3000,\r\n    pv: 1398,\r\n    amt: 2210,\r\n  },\r\n  {\r\n    name: \"Page C\",\r\n    uv: 2000,\r\n    pv: 9800,\r\n    amt: 2290,\r\n  },\r\n  {\r\n    name: \"Page D\",\r\n    uv: 2780,\r\n    pv: 3908,\r\n    amt: 2000,\r\n  },\r\n  {\r\n    name: \"Page E\",\r\n    uv: 1890,\r\n    pv: 4800,\r\n    amt: 2181,\r\n  },\r\n  {\r\n    name: \"Page F\",\r\n    uv: 2390,\r\n    pv: 3800,\r\n    amt: 2500,\r\n  },\r\n  {\r\n    name: \"Page G\",\r\n    uv: 3490,\r\n    pv: 4300,\r\n    amt: 2100,\r\n  },\r\n];\r\n\r\nexport default class Example extends PureComponent {\r\n  static demoUrl = \"https://codesandbox.io/s/stacked-bar-chart-s47i2\";\r\n\r\n  render() {\r\n    return (\r\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n        <BarChart\r\n          width={500}\r\n          height={300}\r\n          data={data}\r\n          margin={{\r\n            top: 20,\r\n            right: 30,\r\n            left: 20,\r\n            bottom: 5,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"name\" />\r\n          <YAxis />\r\n          <Tooltip />\r\n          <Legend />\r\n          <Bar dataKey=\"pv\" stackId=\"a\" fill=\"#8884d8\" />\r\n          <Bar dataKey=\"uv\" stackId=\"a\" fill=\"#82ca9d\" />\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent } from \"react\";\r\nimport {\r\n  ScatterChart,\r\n  Scatter,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\n\r\nconst data = [\r\n  { x: 100, y: 200, z: 200 },\r\n  { x: 120, y: 100, z: 260 },\r\n  { x: 170, y: 300, z: 400 },\r\n  { x: 140, y: 250, z: 280 },\r\n  { x: 150, y: 400, z: 500 },\r\n  { x: 110, y: 280, z: 200 },\r\n];\r\n\r\nexport default class Example extends PureComponent {\r\n  static demoUrl = \"https://codesandbox.io/s/simple-line-chart-kec3v\";\r\n\r\n  render() {\r\n    return (\r\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n        <ScatterChart\r\n          width={400}\r\n          height={400}\r\n          margin={{\r\n            top: 20,\r\n            right: 20,\r\n            bottom: 20,\r\n            left: 20,\r\n          }}\r\n        >\r\n          <CartesianGrid />\r\n          <XAxis type=\"number\" dataKey=\"x\" name=\"stature\" unit=\"cm\" />\r\n          <YAxis type=\"number\" dataKey=\"y\" name=\"weight\" unit=\"kg\" />\r\n          <Tooltip cursor={{ strokeDasharray: \"3 3\" }} />\r\n          <Scatter name=\"A school\" data={data} fill=\"#8884d8\" />\r\n        </ScatterChart>\r\n      </ResponsiveContainer>\r\n    );\r\n  }\r\n}\r\n","import React, { FC, ReactNode } from \"react\";\r\nimport styles from \"./WidgetCard.module.scss\";\r\nimport { CloseButton } from \"@chakra-ui/react\";\r\nimport SimpleLineChart from \"../widgets/SimpleLineChart\";\r\nimport StackedAreaChart from \"../widgets/StackedAreaChart\";\r\nimport MixedBarChart from \"../widgets/MixedBarChart\";\r\nimport StackedBarChart from \"../widgets/StackedBarChart\";\r\nimport SimpleScatterChart from \"../widgets/SimpleScatterChart\";\r\n\r\ninterface IWidgetCardProps {\r\n  deleteWidget: (i: string) => void;\r\n  i: string;\r\n  isEditorModeOn: boolean;\r\n}\r\n\r\ninterface IMap<T> {\r\n  [key: string]: T;\r\n}\r\nconst WidgetCard: FC<IWidgetCardProps> = ({\r\n  deleteWidget,\r\n  i,\r\n  isEditorModeOn,\r\n}) => {\r\n  const displayedWidget: IMap<ReactNode> = {\r\n    \"Simple Line Chart\": <SimpleLineChart />,\r\n    \"Stacked Area Chart\": <StackedAreaChart />,\r\n    \"Mixed Bar Chart\": <MixedBarChart />,\r\n    \"Stacked Bar Chart\": <StackedBarChart />,\r\n    \"Simple Scatter Chart\": <SimpleScatterChart />,\r\n  };\r\n  return (\r\n    <div\r\n      className={`${styles.WidgetCard} ${\r\n        isEditorModeOn && styles.WidgetCardInEditMode\r\n      }`}\r\n    >\r\n      <header\r\n        className={`${styles.header} && ${\r\n          !isEditorModeOn && styles.headerInReadOnlyMode\r\n        }`}\r\n      >\r\n        {isEditorModeOn && <div></div>}\r\n        <div className={styles.title}>{i}</div>\r\n        {isEditorModeOn && (\r\n          <CloseButton onClick={() => deleteWidget(i)} size=\"sm\" />\r\n        )}\r\n      </header>\r\n      <div className={styles.body}>{displayedWidget[i]}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WidgetCard;\r\n","import React, { FC, Dispatch, SetStateAction } from \"react\";\r\nimport RGL, { WidthProvider } from \"react-grid-layout\";\r\nimport { IWidgetPosition } from \"../../../types/common\";\r\nimport WidgetCard from \"../widgetCard/WidgetCard\";\r\nimport \"react-grid-layout/css/styles.css\";\r\n\r\nconst ReactGridLayout = WidthProvider(RGL);\r\n\r\ninterface IEditorProps {\r\n  layout: IWidgetPosition[];\r\n  setLayout: Dispatch<SetStateAction<IWidgetPosition[]>>;\r\n  deleteWidget: (i: string) => void;\r\n  isEditorModeOn: boolean;\r\n}\r\n\r\nconst WidgetGrid: FC<IEditorProps> = ({\r\n  layout,\r\n  setLayout,\r\n  deleteWidget,\r\n  isEditorModeOn,\r\n}) => {\r\n  return (\r\n    <ReactGridLayout\r\n      className=\"layout\"\r\n      layout={layout}\r\n      cols={6}\r\n      isDraggable={isEditorModeOn}\r\n      isResizable={isEditorModeOn}\r\n      onLayoutChange={(layout) => setLayout(layout)}\r\n    >\r\n      {layout.map((item) => (\r\n        <div key={item.i}>\r\n          <WidgetCard\r\n            data-grid={item}\r\n            deleteWidget={deleteWidget}\r\n            i={item.i}\r\n            isEditorModeOn={isEditorModeOn}\r\n          />\r\n        </div>\r\n      ))}\r\n    </ReactGridLayout>\r\n  );\r\n};\r\n\r\nexport default WidgetGrid;\r\n","import React, { FC, Dispatch, SetStateAction } from \"react\";\r\nimport { IWidgetPosition } from \"../../types/common\";\r\nimport WidgetGrid from \"../../components/common/widgetGrid/WidgetGrid\";\r\nimport styles from \"./Editor.module.scss\";\r\n\r\ninterface IEditorProps {\r\n  layout: IWidgetPosition[];\r\n  setLayout: Dispatch<SetStateAction<IWidgetPosition[]>>;\r\n  deleteWidget: (i: string) => void;\r\n  isEditorModeOn: boolean;\r\n}\r\n\r\nconst Editor: FC<IEditorProps> = ({\r\n  layout,\r\n  setLayout,\r\n  deleteWidget,\r\n  isEditorModeOn,\r\n}) => {\r\n  let numberOfEmptyPanelsInGrid = 12;\r\n\r\n  /* Dashboard configuration interface should be represented by a 6 * X matrix where 6 is a fixed number of columns and X is a number of rows which increments \r\n  dynamically as more widgets are added to the dashboard. The minimal number of rows is 2 when a dashboard is empty, otherwise it is X + 1 additional empty row \r\n  when a dashboard is already populated with widgets (e.g. if 2 rows are occupied, display 3 with the 3rd being a completely empty row).\r\n  */\r\n  if (layout.length) {\r\n    const maxWidgetYPosition = Math.max(...layout.map((widgdet) => widgdet.y));\r\n    const maxHeightofHighestWidget = Math.max(\r\n      ...layout\r\n        .filter((widget) => widget.y === maxWidgetYPosition)\r\n        .map((widget) => widget.h)\r\n    );\r\n    numberOfEmptyPanelsInGrid =\r\n      (maxWidgetYPosition + maxHeightofHighestWidget + 1) * 6;\r\n  }\r\n  return (\r\n    <>\r\n      <div style={{ position: \"relative\" }}>\r\n        <div className={styles.emptyPanelsgrid}>\r\n          {Array.from({ length: numberOfEmptyPanelsInGrid }).map((_) => (\r\n            <div className={styles.emptyPanel}></div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div className={styles.widgetLayout}>\r\n        <WidgetGrid {...{ layout, setLayout, deleteWidget, isEditorModeOn }} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n","import React, { FC, Dispatch, SetStateAction } from \"react\";\r\nimport { IWidgetPosition } from \"../../types/common\";\r\nimport WidgetGrid from \"../../components/common/widgetGrid/WidgetGrid\";\r\n\r\ninterface IDashboardProps {\r\n  layout: IWidgetPosition[];\r\n  setLayout: Dispatch<SetStateAction<IWidgetPosition[]>>;\r\n  deleteWidget: (i: string) => void;\r\n  isEditorModeOn: boolean;\r\n}\r\n\r\nconst Dashboard: FC<IDashboardProps> = ({\r\n  layout,\r\n  setLayout,\r\n  deleteWidget,\r\n  isEditorModeOn,\r\n}) => {\r\n  return (\r\n    <WidgetGrid\r\n      {...{ layout, setLayout, deleteWidget }}\r\n      isEditorModeOn={isEditorModeOn}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","import React, { FC, ChangeEvent, Dispatch, SetStateAction } from \"react\";\r\nimport { Switch } from \"@chakra-ui/switch\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  IconButton,\r\n  MenuButton,\r\n  Menu,\r\n  MenuList,\r\n  MenuItem,\r\n} from \"@chakra-ui/react\";\r\nimport styles from \"./AppHeader.module.scss\";\r\nimport { IWidgetPosition } from \"../../../types/common\";\r\nimport { AddIcon } from \"@chakra-ui/icons\";\r\n// import { ColorModeSwitcher } from \"../../../ColorModeSwitcher\";\r\n\r\ninterface IAppHeaderProps {\r\n  isEditorModeOn: boolean;\r\n  setIsEditorModeOn: Dispatch<SetStateAction<boolean>>;\r\n  addWidget: (i: string) => void;\r\n  layout: IWidgetPosition[];\r\n}\r\nconst AppHeader: FC<IAppHeaderProps> = ({\r\n  isEditorModeOn,\r\n  layout,\r\n  setIsEditorModeOn,\r\n  addWidget,\r\n}) => {\r\n  const allWidgetOptions = [\r\n    \"Simple Line Chart\",\r\n    \"Stacked Area Chart\",\r\n    \"Mixed Bar Chart\",\r\n    \"Stacked Bar Chart\",\r\n    \"Simple Scatter Chart\",\r\n  ];\r\n\r\n  const availableWidgetOptions = allWidgetOptions.filter(\r\n    (option) => !layout.some((widget) => widget.i === option)\r\n  );\r\n  return (\r\n    <header className={styles.header}>\r\n      <nav className={styles.nav}>\r\n        <FormControl display=\"flex\" alignItems=\"center\">\r\n          <FormLabel htmlFor=\"editor-mode\" mb=\"0\">\r\n            Editor Mode\r\n          </FormLabel>\r\n          <Switch\r\n            id=\"editor-mode\"\r\n            isChecked={isEditorModeOn}\r\n            onChange={(e: ChangeEvent<HTMLInputElement>): void =>\r\n              setIsEditorModeOn(e.target.checked)\r\n            }\r\n            className={styles.editorModeSwitch}\r\n          />\r\n        </FormControl>\r\n        {isEditorModeOn && (\r\n          <Menu>\r\n            <MenuButton\r\n              as={IconButton}\r\n              aria-label=\"add-widget-options\"\r\n              icon={<AddIcon />}\r\n              variant=\"outline\"\r\n            />\r\n            <MenuList>\r\n              {availableWidgetOptions.length ? (\r\n                availableWidgetOptions\r\n                  .filter(\r\n                    (option) => !layout.some((widget) => widget.i === option)\r\n                  )\r\n                  .map((option) => (\r\n                    <MenuItem onClick={() => addWidget(option)}>\r\n                      {option}\r\n                    </MenuItem>\r\n                  ))\r\n              ) : (\r\n                <MenuItem className={styles.noMoreOptions}>\r\n                  No options available.\r\n                </MenuItem>\r\n              )}\r\n            </MenuList>\r\n          </Menu>\r\n        )}\r\n      </nav>\r\n      {/* <ColorModeSwitcher /> */}\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default AppHeader;\r\n","import { ChakraProvider, theme } from \"@chakra-ui/react\";\r\nimport React, { FC, useState } from \"react\";\r\nimport Editor from \"./pages/editor/Editor\";\r\nimport Dashboard from \"./pages/dashboard/Dashboard\";\r\nimport styles from \"./App.module.scss\";\r\nimport { NUMBER_OF_COLUMNS } from \"../src/utils/constants\";\r\nimport { IWidgetPosition } from \"../src/types/common\";\r\nimport AppHeader from \"./components/common/appHeader/AppHeader\";\r\nimport \"./App.scss\";\r\n/**\r\n * TODO:\r\n * 1. Make placeholder app page. (DONE)\r\n * 2. Make placeholder editor page. (DONE)\r\n * 3. Make placeholder read page. (DONE)\r\n * 4. Put placeholder editor and read pages in app page. (DONE)\r\n * 5. Build switch in top-left corner to toggle between editor and read pages. (DONE)\r\n * 6. Switch to editor mode. (DONE)\r\n * 7. Make placeholder for widget component (DONE)\r\n * 8. Create add widget button with dropdown that allows you to toggle between chart types. (DONE)\r\n * 9. Create draggable/resizable grid with https://www.npmjs.com/package/react-grid-layout. (DONE)\r\n * 10. Make responsive and performant. (DONE)\r\n * 11. Create empty widget panel. (DONE)\r\n * 12. Make it 2 x 2 squares by default. (DONE)\r\n * 13. Make responsive and performant. (DONE)\r\n * 14. Make resizable/draggable (and make sure mouse icon corresponds to resize/drag region and hover turns border green). (DONE)\r\n * 15. Make the widget panel display the mock simple bar chart. (DONE)\r\n * 16. Mock multiples of this widget panel, make sure everything works. (DONE)\r\n * 17. Make responsive and performant. (DONE)\r\n * 18. Add a delete option which deletes the widget. (DONE)\r\n * 19. Make sure still responsive and performant. (DONE)\r\n * 20. Try and create a base of 6 * X matrix where 6 is a fixed\r\n *     number of columns and X is a number of rows which increments dynamically as more widgets are added to the board. Min 2 rows when dashboard is empty\r\n *     , otherwise it is X + 1 (e.g. 3 rows when 2 are populated with widgets where 3rd row is empty). (DONE)\r\n * 21. Try and create the background of empty panel tiles within react-grid-layout component. If can't do, create a fixed component for this and position it underneath the\r\n *     react-grid-layout component to look like a background. (DONE)\r\n * 21. Dashboards should not have empty rows. When widgets are deleted from the dashboard and empty rows are created – widgets below empty rows should shift to the top and fill up those empty rows. (DONE)\r\n * 22. Make dashboard empty on app mount. (DONE)\r\n * 23. Make 'add widget' button actually add the corresponding widget panel to the dashboard. (DONE)\r\n * 24. Make sure the added widget type is automatically removed from the 'add widget' button's dropdown options. (DONE)\r\n * 25. Add 4/5 more chart types with corresponding mock data. (DONE)\r\n */\r\n\r\nexport const App: FC = () => {\r\n  const [isEditorModeOn, setIsEditorModeOn] = useState(true);\r\n  const [layout, setLayout] = useState<IWidgetPosition[]>([]);\r\n\r\n  /**\r\n   * @description Add a new widget add the end of the current widget layout.\r\n   * @param i index/identifer of widget\r\n   */\r\n  const addWidget = (i: string): void => {\r\n    if (layout.length) {\r\n      const lastWidgetPosition = layout[layout.length - 1];\r\n      return setLayout(\r\n        (currentLayout: IWidgetPosition[]): IWidgetPosition[] => [\r\n          ...currentLayout,\r\n          {\r\n            i,\r\n            x:\r\n              lastWidgetPosition.x >= NUMBER_OF_COLUMNS - 2\r\n                ? 0\r\n                : lastWidgetPosition.x + 2,\r\n            y:\r\n              lastWidgetPosition.x >= NUMBER_OF_COLUMNS - 2\r\n                ? lastWidgetPosition.y + 2\r\n                : lastWidgetPosition.y,\r\n            w: 2,\r\n            h: 2,\r\n          },\r\n        ]\r\n      );\r\n    }\r\n    setLayout([{ i, x: 0, y: 0, w: 2, h: 2 }]);\r\n  };\r\n\r\n  /**\r\n   * @description Delete widget.\r\n   * @param i index/identifer of widget\r\n   */\r\n  const deleteWidget = (i: string): void =>\r\n    setLayout((currentLayout) =>\r\n      currentLayout.filter((widget) => widget.i !== i)\r\n    );\r\n\r\n  return (\r\n    <ChakraProvider theme={theme}>\r\n      <div className={styles.App}>\r\n        <AppHeader\r\n          {...{ isEditorModeOn, layout, setIsEditorModeOn, addWidget }}\r\n        />\r\n        <body className={styles.body}>\r\n          {isEditorModeOn ? (\r\n            <Editor\r\n              layout={layout}\r\n              setLayout={setLayout}\r\n              deleteWidget={deleteWidget}\r\n              isEditorModeOn={isEditorModeOn}\r\n            />\r\n          ) : (\r\n            <Dashboard\r\n              layout={layout}\r\n              setLayout={setLayout}\r\n              deleteWidget={deleteWidget}\r\n              isEditorModeOn={isEditorModeOn}\r\n            />\r\n          )}\r\n        </body>\r\n      </div>\r\n    </ChakraProvider>\r\n  );\r\n};\r\n","import { ReportHandler } from \"web-vitals\"\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry)\r\n      getFID(onPerfEntry)\r\n      getFCP(onPerfEntry)\r\n      getLCP(onPerfEntry)\r\n      getTTFB(onPerfEntry)\r\n    })\r\n  }\r\n}\r\n\r\nexport default reportWebVitals\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n)\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://cra.link/PWA\",\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It is the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\")\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\")\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\",\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister()\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message)\r\n      })\r\n  }\r\n}\r\n","import { ColorModeScript } from \"@chakra-ui/react\"\r\nimport * as React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport { App } from \"./App\"\r\nimport reportWebVitals from \"./reportWebVitals\"\r\nimport * as serviceWorker from \"./serviceWorker\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ColorModeScript />\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\"),\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorker.unregister()\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"WidgetCard\":\"WidgetCard_WidgetCard__1KSGu\",\"header\":\"WidgetCard_header__3LP4b\",\"headerInReadOnlyMode\":\"WidgetCard_headerInReadOnlyMode__3Cd4t\",\"body\":\"WidgetCard_body__3J5Re\",\"title\":\"WidgetCard_title__QEnhP\",\"WidgetCardInEditMode\":\"WidgetCard_WidgetCardInEditMode__1peJ6\"};"],"sourceRoot":""}