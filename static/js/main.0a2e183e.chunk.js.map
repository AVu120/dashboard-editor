{"version":3,"sources":["components/common/widgetCard/WidgetCard.tsx","components/common/widgetGrid/WidgetGrid.tsx","pages/editor/Editor.tsx","pages/dashboard/Dashboard.tsx","components/common/appHeader/AppHeader.tsx","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx","components/common/widgetCard/WidgetCard.module.scss","components/common/appHeader/AppHeader.module.scss","pages/editor/Editor.module.scss","App.module.scss"],"names":["WidgetCard","deleteWidget","i","isEditorModeOn","className","styles","WidgetCardInEditMode","header","onClick","size","body","ReactGridLayout","WidthProvider","RGL","WidgetGrid","layout","setLayout","cols","isDraggable","isResizable","onLayoutChange","map","item","Editor","numberOfEmptyPanelsInGrid","length","maxWidgetYPosition","Math","max","widgdet","y","maxHeightofHighestWidget","filter","widget","h","style","position","emptyPanelsgrid","Array","from","_","emptyPanel","widgetLayout","Dashboard","AppHeader","setIsEditorModeOn","addWidget","availableWidgetOptions","option","some","nav","display","alignItems","htmlFor","mb","id","isChecked","onChange","e","target","checked","editorModeSwitch","as","IconButton","icon","Add","variant","noMoreOptions","App","useState","currentLayout","theme","lastWidgetPosition","x","NUMBER_OF_COLUMNS","w","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.0a2e183e.chunk.js","sourcesContent":["import React, { FC } from \"react\";\r\nimport styles from \"./WidgetCard.module.scss\";\r\nimport { CloseButton } from \"@chakra-ui/react\";\r\n\r\ninterface IWidgetCardProps {\r\n  deleteWidget: (i: string) => void;\r\n  i: string;\r\n  isEditorModeOn: boolean;\r\n}\r\nconst WidgetCard: FC<IWidgetCardProps> = ({\r\n  deleteWidget,\r\n  i,\r\n  isEditorModeOn,\r\n}) => {\r\n  return (\r\n    <div\r\n      className={`${styles.WidgetCard} ${\r\n        isEditorModeOn && styles.WidgetCardInEditMode\r\n      }`}\r\n    >\r\n      <header className={styles.header}>\r\n        <div></div>\r\n        {isEditorModeOn && (\r\n          <CloseButton onClick={() => deleteWidget(i)} size=\"sm\" />\r\n        )}\r\n      </header>\r\n      <div className={styles.body}>{i}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WidgetCard;\r\n","import React, { FC, Dispatch, SetStateAction } from \"react\";\r\nimport RGL, { WidthProvider } from \"react-grid-layout\";\r\nimport { IWidgetPosition } from \"../../../types/common\";\r\nimport WidgetCard from \"../widgetCard/WidgetCard\";\r\nimport \"react-grid-layout/css/styles.css\";\r\n\r\nconst ReactGridLayout = WidthProvider(RGL);\r\n\r\ninterface IEditorProps {\r\n  layout: IWidgetPosition[];\r\n  setLayout: Dispatch<SetStateAction<IWidgetPosition[]>>;\r\n  deleteWidget: (i: string) => void;\r\n  isEditorModeOn: boolean;\r\n}\r\n\r\nconst WidgetGrid: FC<IEditorProps> = ({\r\n  layout,\r\n  setLayout,\r\n  deleteWidget,\r\n  isEditorModeOn,\r\n}) => {\r\n  return (\r\n    <ReactGridLayout\r\n      className=\"layout\"\r\n      layout={layout}\r\n      cols={6}\r\n      isDraggable={isEditorModeOn}\r\n      isResizable={isEditorModeOn}\r\n      onLayoutChange={(layout) => setLayout(layout)}\r\n    >\r\n      {layout.map((item) => (\r\n        <div key={item.i}>\r\n          <WidgetCard\r\n            data-grid={item}\r\n            deleteWidget={deleteWidget}\r\n            i={item.i}\r\n            isEditorModeOn={isEditorModeOn}\r\n          />\r\n        </div>\r\n      ))}\r\n    </ReactGridLayout>\r\n  );\r\n};\r\n\r\nexport default WidgetGrid;\r\n","import React, { FC, Dispatch, SetStateAction } from \"react\";\r\nimport { IWidgetPosition } from \"../../types/common\";\r\nimport WidgetGrid from \"../../components/common/widgetGrid/WidgetGrid\";\r\nimport styles from \"./Editor.module.scss\";\r\n\r\ninterface IEditorProps {\r\n  layout: IWidgetPosition[];\r\n  setLayout: Dispatch<SetStateAction<IWidgetPosition[]>>;\r\n  deleteWidget: (i: string) => void;\r\n  isEditorModeOn: boolean;\r\n}\r\n\r\nconst Editor: FC<IEditorProps> = ({\r\n  layout,\r\n  setLayout,\r\n  deleteWidget,\r\n  isEditorModeOn,\r\n}) => {\r\n  let numberOfEmptyPanelsInGrid = 12;\r\n\r\n  /* Dashboard configuration interface should be represented by a 6 * X matrix where 6 is a fixed number of columns and X is a number of rows which increments \r\n  dynamically as more widgets are added to the dashboard. The minimal number of rows is 2 when a dashboard is empty, otherwise it is X + 1 additional empty row \r\n  when a dashboard is already populated with widgets (e.g. if 2 rows are occupied, display 3 with the 3rd being a completely empty row).\r\n  */\r\n  if (layout.length) {\r\n    const maxWidgetYPosition = Math.max(...layout.map((widgdet) => widgdet.y));\r\n    const maxHeightofHighestWidget = Math.max(\r\n      ...layout\r\n        .filter((widget) => widget.y === maxWidgetYPosition)\r\n        .map((widget) => widget.h)\r\n    );\r\n    numberOfEmptyPanelsInGrid =\r\n      (maxWidgetYPosition + maxHeightofHighestWidget + 1) * 6;\r\n  }\r\n  return (\r\n    <>\r\n      <div style={{ position: \"relative\" }}>\r\n        <div className={styles.emptyPanelsgrid}>\r\n          {Array.from({ length: numberOfEmptyPanelsInGrid }).map((_) => (\r\n            <div className={styles.emptyPanel}></div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div className={styles.widgetLayout}>\r\n        <WidgetGrid {...{ layout, setLayout, deleteWidget, isEditorModeOn }} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n","import React, { FC, Dispatch, SetStateAction } from \"react\";\r\nimport { IWidgetPosition } from \"../../types/common\";\r\nimport WidgetGrid from \"../../components/common/widgetGrid/WidgetGrid\";\r\n\r\ninterface IDashboardProps {\r\n  layout: IWidgetPosition[];\r\n  setLayout: Dispatch<SetStateAction<IWidgetPosition[]>>;\r\n  deleteWidget: (i: string) => void;\r\n  isEditorModeOn: boolean;\r\n}\r\n\r\nconst Dashboard: FC<IDashboardProps> = ({\r\n  layout,\r\n  setLayout,\r\n  deleteWidget,\r\n  isEditorModeOn,\r\n}) => {\r\n  return (\r\n    <WidgetGrid\r\n      {...{ layout, setLayout, deleteWidget }}\r\n      isEditorModeOn={isEditorModeOn}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","import React, { FC, ChangeEvent, Dispatch, SetStateAction } from \"react\";\r\nimport { Switch } from \"@chakra-ui/switch\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  IconButton,\r\n  MenuButton,\r\n  Menu,\r\n  MenuList,\r\n  MenuItem,\r\n} from \"@chakra-ui/react\";\r\nimport styles from \"./AppHeader.module.scss\";\r\nimport { IWidgetPosition } from \"../../../types/common\";\r\nimport { AddIcon } from \"@chakra-ui/icons\";\r\n// import { ColorModeSwitcher } from \"../../../ColorModeSwitcher\";\r\n\r\ninterface IAppHeaderProps {\r\n  isEditorModeOn: boolean;\r\n  setIsEditorModeOn: Dispatch<SetStateAction<boolean>>;\r\n  addWidget: (i: string) => void;\r\n  layout: IWidgetPosition[];\r\n}\r\nconst AppHeader: FC<IAppHeaderProps> = ({\r\n  isEditorModeOn,\r\n  layout,\r\n  setIsEditorModeOn,\r\n  addWidget,\r\n}) => {\r\n  const allWidgetOptions = [\r\n    \"Simple Line Chart\",\r\n    \"Stacked Area Chart\",\r\n    \"Mixed Bar Chart\",\r\n    \"Stacked Bar Chart\",\r\n    \"Simple Scatter Chart\",\r\n  ];\r\n\r\n  const availableWidgetOptions = allWidgetOptions.filter(\r\n    (option) => !layout.some((widget) => widget.i === option)\r\n  );\r\n  return (\r\n    <header className={styles.header}>\r\n      <nav className={styles.nav}>\r\n        <FormControl display=\"flex\" alignItems=\"center\">\r\n          <FormLabel htmlFor=\"editor-mode\" mb=\"0\">\r\n            Editor Mode\r\n          </FormLabel>\r\n          <Switch\r\n            id=\"editor-mode\"\r\n            isChecked={isEditorModeOn}\r\n            onChange={(e: ChangeEvent<HTMLInputElement>): void =>\r\n              setIsEditorModeOn(e.target.checked)\r\n            }\r\n            className={styles.editorModeSwitch}\r\n          />\r\n        </FormControl>\r\n        {isEditorModeOn && (\r\n          <Menu>\r\n            <MenuButton\r\n              as={IconButton}\r\n              aria-label=\"add-widget-options\"\r\n              icon={<AddIcon />}\r\n              variant=\"outline\"\r\n            />\r\n            <MenuList>\r\n              {availableWidgetOptions.length ? (\r\n                availableWidgetOptions\r\n                  .filter(\r\n                    (option) => !layout.some((widget) => widget.i === option)\r\n                  )\r\n                  .map((option) => (\r\n                    <MenuItem onClick={() => addWidget(option)}>\r\n                      {option}\r\n                    </MenuItem>\r\n                  ))\r\n              ) : (\r\n                <MenuItem className={styles.noMoreOptions}>\r\n                  No options available.\r\n                </MenuItem>\r\n              )}\r\n            </MenuList>\r\n          </Menu>\r\n        )}\r\n      </nav>\r\n      {/* <ColorModeSwitcher /> */}\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default AppHeader;\r\n","import { ChakraProvider, theme } from \"@chakra-ui/react\";\r\nimport React, { FC, useState } from \"react\";\r\nimport Editor from \"./pages/editor/Editor\";\r\nimport Dashboard from \"./pages/dashboard/Dashboard\";\r\nimport styles from \"./App.module.scss\";\r\nimport { NUMBER_OF_COLUMNS } from \"../src/utils/constants\";\r\nimport { IWidgetPosition } from \"../src/types/common\";\r\nimport AppHeader from \"./components/common/appHeader/AppHeader\";\r\nimport \"./App.scss\";\r\n/**\r\n * TODO:\r\n * 1. Make placeholder app page. (DONE)\r\n * 2. Make placeholder editor page. (DONE)\r\n * 3. Make placeholder read page. (DONE)\r\n * 4. Put placeholder editor and read pages in app page. (DONE)\r\n * 5. Build switch in top-left corner to toggle between editor and read pages. (DONE)\r\n * 6. Switch to editor mode. (DONE)\r\n * 7. Make placeholder for widget component (DONE)\r\n * 8. Create add widget button with dropdown that allows you to toggle between chart types. (DONE)\r\n * 9. Create draggable/resizable grid with https://www.npmjs.com/package/react-grid-layout. (DONE)\r\n * 10. Make responsive and performant. (DONE)\r\n * 11. Create empty widget panel. (DONE)\r\n * 12. Make it 2 x 2 squares by default. (DONE)\r\n * 13. Make responsive and performant. (DONE)\r\n * 14. Make resizable/draggable (and make sure mouse icon corresponds to resize/drag region and hover turns border green). (DONE)\r\n * 15. Make the widget panel display the mock simple bar chart. (DONE)\r\n * 16. Mock multiples of this widget panel, make sure everything works. (DONE)\r\n * 17. Make responsive and performant. (DONE)\r\n * 18. Add a delete option which deletes the widget. (DONE)\r\n * 19. Make sure still responsive and performant. (DONE)\r\n * 20. Try and create a base of 6 * X matrix where 6 is a fixed\r\n *     number of columns and X is a number of rows which increments dynamically as more widgets are added to the board. Min 2 rows when dashboard is empty\r\n *     , otherwise it is X + 1 (e.g. 3 rows when 2 are populated with widgets where 3rd row is empty). (DONE)\r\n * 21. Try and create the background of empty panel tiles within react-grid-layout component. If can't do, create a fixed component for this and position it underneath the\r\n *     react-grid-layout component to look like a background. (DONE)\r\n * 21. Dashboards should not have empty rows. When widgets are deleted from the dashboard and empty rows are created – widgets below empty rows should shift to the top and fill up those empty rows. (DONE)\r\n * 22. Make dashboard empty on app mount. (DONE)\r\n * 23. Make 'add widget' button actually add the corresponding widget panel to the dashboard. (DONE)\r\n * 24. Make sure the added widget type is automatically removed from the 'add widget' button's dropdown options. (DONE)\r\n * 25. Add 4/5 more chart types with corresponding mock data. (DONE)\r\n */\r\n\r\nexport const App: FC = () => {\r\n  const [isEditorModeOn, setIsEditorModeOn] = useState(true);\r\n  const [layout, setLayout] = useState<IWidgetPosition[]>([]);\r\n\r\n  /**\r\n   * @description Add a new widget add the end of the current widget layout.\r\n   * @param i index/identifer of widget\r\n   */\r\n  const addWidget = (i: string): void => {\r\n    if (layout.length) {\r\n      const lastWidgetPosition = layout[layout.length - 1];\r\n      return setLayout(\r\n        (currentLayout: IWidgetPosition[]): IWidgetPosition[] => [\r\n          ...currentLayout,\r\n          {\r\n            i,\r\n            x:\r\n              lastWidgetPosition.x >= NUMBER_OF_COLUMNS - 2\r\n                ? 0\r\n                : lastWidgetPosition.x + 2,\r\n            y:\r\n              lastWidgetPosition.x >= NUMBER_OF_COLUMNS - 2\r\n                ? lastWidgetPosition.y + 2\r\n                : lastWidgetPosition.y,\r\n            w: 2,\r\n            h: 2,\r\n          },\r\n        ]\r\n      );\r\n    }\r\n    setLayout([{ i, x: 0, y: 0, w: 2, h: 2 }]);\r\n  };\r\n\r\n  /**\r\n   * @description Delete widget.\r\n   * @param i index/identifer of widget\r\n   */\r\n  const deleteWidget = (i: string): void =>\r\n    setLayout((currentLayout) =>\r\n      currentLayout.filter((widget) => widget.i !== i)\r\n    );\r\n\r\n  return (\r\n    <ChakraProvider theme={theme}>\r\n      <div className={styles.App}>\r\n        <AppHeader\r\n          {...{ isEditorModeOn, layout, setIsEditorModeOn, addWidget }}\r\n        />\r\n        <body className={styles.body}>\r\n          {isEditorModeOn ? (\r\n            <Editor\r\n              layout={layout}\r\n              setLayout={setLayout}\r\n              deleteWidget={deleteWidget}\r\n              isEditorModeOn={isEditorModeOn}\r\n            />\r\n          ) : (\r\n            <Dashboard\r\n              layout={layout}\r\n              setLayout={setLayout}\r\n              deleteWidget={deleteWidget}\r\n              isEditorModeOn={isEditorModeOn}\r\n            />\r\n          )}\r\n        </body>\r\n      </div>\r\n    </ChakraProvider>\r\n  );\r\n};\r\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"WidgetCard\":\"WidgetCard_WidgetCard__3XMPy\",\"header\":\"WidgetCard_header__1TB7D\",\"body\":\"WidgetCard_body__2YFtx\",\"title\":\"WidgetCard_title__dtUvc\",\"WidgetCardInEditMode\":\"WidgetCard_WidgetCardInEditMode__hVeAP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"AppHeader_header__18p6l\",\"nav\":\"AppHeader_nav__29SCa\",\"noMoreOptions\":\"AppHeader_noMoreOptions__Vz9K4\",\"editorModeSwitch\":\"AppHeader_editorModeSwitch__2QGso\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"emptyPanelsgrid\":\"Editor_emptyPanelsgrid__jXWPp\",\"emptyPanel\":\"Editor_emptyPanel__WAl6s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__Gt4wP\",\"body\":\"App_body__KESTu\"};"],"sourceRoot":""}